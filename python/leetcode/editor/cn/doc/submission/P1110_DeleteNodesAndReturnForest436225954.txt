
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public Set<Integer> set;
        public List<TreeNode> res;

        public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
            set = new HashSet<>();
            for (int i : to_delete) {
                set.add(i);
            }
            res = new ArrayList<>();
            if (!dfs(root)) {
                res.add(root);
            }
            return res;
        }

        public boolean dfs(TreeNode treeNode) {
            if (treeNode == null) {
                return false;
            }
            if (dfs(treeNode.left)) {
                treeNode.left = null;
            }
            if (dfs(treeNode.right)) {
                treeNode.right = null;
            }
            if (set.isEmpty()) {
                return false;
            }
            if (set.contains(treeNode.val)) {
                if (treeNode.left != null) {
                    res.add(treeNode.left);
                }
                if (treeNode.right != null) {
                    res.add(treeNode.right);
                }
                set.remove(treeNode.val);
                return true;
            }
            return false;
        }
    }

//runtime:1 ms
//memory:42.6 MB
