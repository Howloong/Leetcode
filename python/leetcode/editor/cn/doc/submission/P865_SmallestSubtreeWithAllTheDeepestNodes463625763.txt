
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public TreeNode res;
        public int max = 0;

        public TreeNode subtreeWithAllDeepest(TreeNode root) {
            dfs(root, 0);
            return res;
        }

        public int dfs(TreeNode node, int depth) {
            if (node == null) {
                return depth;
            }
            int left = dfs(node.left, depth + 1);
            int right = dfs(node.right, depth + 1);
            int curMax = Math.max(left, right);
            max = Math.max(max, curMax);
            if (left == right && left == max) {
                res = node;
            }
            return curMax;
        }
    }

//runtime:0 ms
//memory:39 MB
