
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public TreeNode sufficientSubset(TreeNode root, int limit) {
            dfs(root, 0, limit);
            return root.right == null && root.left == null ? null : root;
        }

        public boolean dfs(TreeNode root, int sum, int limit) {
            if (root.left == null && root.right == null) {
                return sum + root.val >= limit;
            }
            boolean left, right;
            left = root.left != null && dfs(root.left, sum + root.val, limit);
            if (!left) {
                root.left = null;
            }
            right = root.right != null && dfs(root.right, sum + root.val, limit);
            if (!right) {
                root.right = null;
            }
            return left || right;
        }
    }

//runtime:0 ms
//memory:42.8 MB
