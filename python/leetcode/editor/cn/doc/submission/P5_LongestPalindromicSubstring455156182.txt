    class Solution {
        public String longestPalindrome(String s) {
          /*  int maxLen = 0;
            int len = s.length();
            int start = 0;
            boolean[][] dp = new boolean[len][len];
            for (boolean[] booleans : dp) {
                Arrays.fill(booleans, false);
            }
            for (int i = len - 1; i >= 0; i--) {
                for (int j = i; j < len; j++) {
                    if (s.charAt(i) == s.charAt(j) && (j - i <= 1 || dp[i + 1][j- 1])) {
                        dp[i][j] = true;
                        if (j - i > maxLen) {
                            maxLen = j - i;
                            start = i;
                        }
                    }
                }
            }
            return s.substring(start, maxLen+start+1);*/
            int maxLen = 0;
            int start = 0;
            int[] temp;
            for (int i = 0; i < s.length(); i++) {
                temp = extend(s, i, i);
                if (maxLen < temp[0]) {
                    maxLen = temp[0];
                    start = temp[1];
                }
                temp = extend(s, i, i + 1);
                if (maxLen < temp[0]) {
                    maxLen = temp[0];
                    start = temp[1];
                }
            }
            return s.substring(start, start + maxLen);
        }

        public int[] extend(String s, int i, int j) {
            while (i >= 0 && j < s.length() && s.charAt(i) == s.charAt(j)) {
                i--;
                j++;
            }
            return new int[]{j - i - 1, i + 1};
        }

    }

//runtime:16 ms
//memory:42.3 MB
