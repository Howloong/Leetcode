## 解法：DP

维护 `f[i][j]` 表示从第 $0$ 行任意位置开始，走到第 $i$ 行第 $j$ 列的最小代价。转移方程为：

`f[i][j] = min(f[i - 1][k] + moveCost[grid[i - 1][k]][j] + grid[i][j])`

初始值为：

`f[0][j] = grid[0][j]`

最小的 `f[n - 1][j]` 即为答案。复杂度 $\mathcal{O}(nm^2)$。

## 参考代码（c++）

* c++

```c++
class Solution {
public:
    int minPathCost(vector<vector<int>>& grid, vector<vector<int>>& moveCost) {
        int n = grid.size(), m = grid[0].size();

        vector<vector<int>> f;
        f.resize(n, vector<int>(m));
        for (int j = 0; j < m; j++) f[0][j] = grid[0][j];
        for (int i = 1; i < n; i++) for (int j = 0; j < m; j++) {
            f[i][j] = 1e9;
            for (int k = 0; k < m; k++) f[i][j] = min(f[i][j], f[i - 1][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);
        }

        int ans = 1e9;
        for (int j = 0; j < m; j++) ans = min(ans, f[n - 1][j]);
        return ans;
    }
};
```

