## 举例

考虑数组 $a=[1,3,3,5,8]$，对其中的相邻元素两两作差（右边减左边），得到数组 $[2,0,2,3]$。然后在开头补上 $a[0]$，得到差分数组

$$
d=[1,2,0,2,3]
$$

这有什么用呢？如果从左到右累加 $d$ 中的元素，我们就「还原」回了 $a$ 数组 $[1,3,3,5,8]$。这类似求导与积分的概念。

这又有什么用呢？现在把连续子数组 $a[1],a[2],a[3]$ 都加上 $10$，得到 $a'=[1,13,13,15,8]$。再次两两作差，并在开头补上 $a'[0]$，得到差分数组

$$
d'=[1,12,0,2,-7]
$$

对比 $d$ 和 $d'$，可以发现只有 $d[1]$ 和 $d[4]$ 变化了，这意味着对 $a$ 中连续子数组的操作，可以转变成对差分数组 $d$ 中**两个数**的操作。

## 定义和性质

对于数组 $a$，定义其**差分数组**（difference array）为

$$
d[i] =
\begin{cases}
a[0],&i=0\\
a[i]-a[i-1],&i\ge 1
\end{cases}
$$

**性质 1**：从左到右累加 $d$ 中的元素，可以得到数组 $a$。

**性质 2**：如下两个操作是等价的。

- 把 $a$ 的子数组 $a[i],a[i+1],\cdots,a[j]$ 都加上 $x$。
- 把 $d[i]$ 增加 $x$，把 $d[j+1]$ 减少 $x$。

利用性质 2，我们只需要 $\mathcal{O}(1)$ 的时间就可以完成对 $a$ 的子数组的操作。最后利用性质 1 从差分数组复原出数组 $a$。

注：也可以这样理解，$d[i]$ 表示把下标 $\ge i$ 的数都加上 $d[i]$。

## 本题思路

对于本题，设 $a[i]$ 表示车行驶到位置 $i$ 时车上的人数。我们需要判断是否所有 $a[i]$ 都不超过 $\textit{capacity}$。

$\textit{trips}[i]$ 相当于把 $a$ 中下标从 $\textit{from}_i$ 到 $\textit{to}_i-1$ 的数都增加 $\textit{numPassengers}_i$。这正好可以用上面讲的差分数组解决。

例如示例 1 对应的 $d$ 数组，$d[1]=2,\ d[5]=-2,\ d[3]=3,\ d[7]=-3$，即

$$
d = [0, 2, 0, 3, 0, -2, 0, -3, \cdots]
$$

从左到右累加，得到

$$
a = [0, 2, 2, 5, 5, 3, 3, 0,\cdots]
$$

$\textit{capacity}=4$，由于 $\max(a)=5>4$，所以返回 `false`。

## 实现方法

有两种写法：

1. 第一种写法是，创建一个长为 $1001$ 的差分数组，这可以保证 $d$ 数组不会下标越界。
2. 第二种写法是，用平衡树（C++ 中的 `map`，Java 中的 `TreeMap`）代替差分数组，因为我们只需要考虑在 $\textit{from}_i$ 和 $\textit{to}_i$ 这些位置上的乘客数，其余位置的乘客是保持不变的，无需考虑。平衡树可以保证我们是从小到大遍历这些位置的。当然，如果你不想用平衡树的话，也可以用哈希表，把哈希表的 key 取出来排序，就可以从小到大遍历这些位置了。

代码实现时，其实无需创建数组 $a$，只需要用一个变量 $s$ 累加差分值，如果在累加过程中发现 $s>\textit{capacity}$ 就返回 `false`。如果没有出现这种情况，就返回 `true`。

#### 第一种写法

* [sol-Python3]

```py
class Solution:
    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        d = [0] * 1001
        for num, from_, to in trips:
            d[from_] += num
            d[to] -= num
        return all(s <= capacity for s in accumulate(d))
```

* [sol-Java]

```java
class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
        int[] d = new int[1001];
        for (int[] t : trips) {
            int num = t[0], from = t[1], to = t[2];
            d[from] += num;
            d[to] -= num;
        }
        int s = 0;
        for (int v : d) {
            s += v;
            if (s > capacity) {
                return false;
            }
        }
        return true;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool carPooling(vector<vector<int>> &trips, int capacity) {
        int d[1001]{};
        for (auto &t : trips) {
            int num = t[0], from = t[1], to = t[2];
            d[from] += num;
            d[to] -= num;
        }
        int s = 0;
        for (int v : d) {
            s += v;
            if (s > capacity) {
                return false;
            }
        }
        return true;
    }
};
```

* [sol-Go]

```go
func carPooling(trips [][]int, capacity int) bool {
    d := [1001]int{}
    for _, t := range trips {
        d[t[1]] += t[0]
        d[t[2]] -= t[0]
    }
    s := 0
    for _, v := range d {
        s += v
        if s > capacity {
            return false
        }
    }
    return true
}
```

* [sol-JavaScript]

```js
var carPooling = function (trips, capacity) {
    const d = new Array(1001).fill(0);
    for (const [num, from, to] of trips) {
        d[from] += num;
        d[to] -= num;
    }
    let s = 0;
    for (const v of d) {
        s += v;
        if (s > capacity) {
            return false;
        }
    }
    return true;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn car_pooling(trips: Vec<Vec<i32>>, capacity: i32) -> bool {
        let mut d = vec![0; 1001];
        for t in &trips {
            let num = t[0];
            let from = t[1] as usize;
            let to = t[2] as usize;
            d[from] += num;
            d[to] -= num;
        }
        let mut s = 0;
        for v in &d {
            s += v;
            if s > capacity {
                return false;
            }
        }
        true
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n+U)$，其中 $n$ 为 $\textit{trips}$ 的长度，$U=\max(\textit{to}_i)$。
- 空间复杂度：$\mathcal{O}(U)$。

#### 第二种写法

* [sol-Python3]

```py
class Solution:
    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        d = Counter()
        for num, from_, to in trips:
            d[from_] += num
            d[to] -= num
        s = 0
        for k in sorted(d):
            s += d[k]
            if s > capacity:
                return False
        return True
```

* [sol-Java]

```java
class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
        TreeMap<Integer, Integer> d = new TreeMap<>();
        for (int[] t : trips) {
            int num = t[0], from = t[1], to = t[2];
            d.merge(from, num, Integer::sum);
            d.merge(to, -num, Integer::sum);
        }
        int s = 0;
        for (int v : d.values()) {
            s += v;
            if (s > capacity) {
                return false;
            }
        }
        return true;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool carPooling(vector<vector<int>> &trips, int capacity) {
        map<int, int> d;
        for (auto &t : trips) {
            int num = t[0], from = t[1], to = t[2];
            d[from] += num;
            d[to] -= num;
        }
        int s = 0;
        for (auto [_, v] : d) {
            s += v;
            if (s > capacity) {
                return false;
            }
        }
        return true;
    }
};
```

* [sol-Go]

```go
func carPooling(trips [][]int, capacity int) bool {
    d := map[int]int{}
    for _, t := range trips {
        d[t[1]] += t[0]
        d[t[2]] -= t[0]
    }
    keys := make([]int, 0, len(d))
    for k := range d {
        keys = append(keys, k)
    }
    slices.Sort(keys)
    s := 0
    for _, k := range keys {
        s += d[k]
        if s > capacity {
            return false
        }
    }
    return true
}
```

* [sol-JavaScript]

```js
var carPooling = function (trips, capacity) {
    const d = new Map();
    for (const [num, from, to] of trips) {
        d.set(from, (d.get(from) ?? 0) + num);
        d.set(to, (d.get(to) ?? 0) - num);
    }
    let s = 0;
    for (const k of [...d.keys()].sort((a, b) => a - b)) {
        s += d.get(k);
        if (s > capacity) {
            return false;
        }
    }
    return true;
};
```

* [sol-Rust]

```rust
use std::collections::BTreeMap;

impl Solution {
    pub fn car_pooling(trips: Vec<Vec<i32>>, capacity: i32) -> bool {
        let mut d = BTreeMap::new();
        for t in &trips {
            let num = t[0];
            let from = t[1];
            let to = t[2];
            *d.entry(from).or_insert(0) += num;
            *d.entry(to).or_insert(0) -= num;
        }
        let mut s = 0;
        for (_, v) in &d {
            s += v;
            if s > capacity {
                return false;
            }
        }
        true
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n\log n)$，其中 $n$ 为 $\textit{trips}$ 的长度。
- 空间复杂度：$\mathcal{O}(n)$。

## 练习题（右边数字为难度分）

- [1109. 航班预订统计](https://leetcode.cn/problems/corporate-flight-bookings/) 1570
- [2406. 将区间分为最少组数](https://leetcode.cn/problems/divide-intervals-into-minimum-number-of-groups/) 1713
- [2381. 字母移位 II](https://leetcode.cn/problems/shifting-letters-ii/) 1793
- [2772. 使数组中的所有元素都等于零](https://leetcode.cn/problems/apply-operations-to-make-all-array-elements-equal-to-zero/) 2029
- [2528. 最大化城市的最小供电站数目](https://leetcode.cn/problems/maximize-the-minimum-powered-city/) 2236

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

更多精彩题解，请看 [往期题解精选（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
