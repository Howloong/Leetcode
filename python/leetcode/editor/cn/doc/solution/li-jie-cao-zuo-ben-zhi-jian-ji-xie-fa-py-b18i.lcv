为方便描述，下文把 $\textit{word}_1$ 记作 $s$，把 $\textit{word}_2$ 记作 $t$。

### 操作 1 的本质：字符可以任意排列

把 $s$ 看成是一叠扑克牌，我们可以随意洗牌。

统计 $s$ 和 $t$ 中字符的出现次数，如果字符及其出现次数都一样，只用操作 1 就可以把 $s$ 变成 $t$（把一叠扑克洗成另一叠扑克）。

如果字符一样，但对应的出现次数不一样呢？这就需要用到操作 2 了。

### 操作 2 的本质：出现次数是可以交换的

以示例 3 为例。统计 $s=\texttt{cabbba}$ 的字符出现次数：

- $\texttt{a}$ 出现 $2$ 次。
- $\texttt{b}$ 出现 $3$ 次。
- $\texttt{c}$ 出现 $1$ 次。

我们可以把 $\texttt{a}$ 都变成 $\texttt{b}$，同时把 $\texttt{b}$ 都变成 $\texttt{a}$。

这相当于交换 $\texttt{a}$ 和 $\texttt{b}$ 的出现次数，得到：

- $\texttt{a}$ 出现 $3$ 次。
- $\texttt{b}$ 出现 $2$ 次。
- $\texttt{c}$ 出现 $1$ 次。

然后交换 $\texttt{a}$ 和 $\texttt{c}$ 的出现次数，得到：

- $\texttt{a}$ 出现 $1$ 次。
- $\texttt{b}$ 出现 $2$ 次。
- $\texttt{c}$ 出现 $3$ 次。

这便是字符串 $t=\texttt{abbccc}$ 的字符出现次数。

所以「出现次数」也像操作 1 那样，是可以任意排列的。

如果 $s$ 和 $t$ 的字符一样，并且字符出现次数的集合是相同的（比如上面这个例子都是集合 $\{1,2,3\}$），那么可以结合操作 1 和操作 2，把 $s$ 变成 $t$。

### 算法

1. 判断 $s$ 和 $t$ 的长度是否一样，如果不一样直接返回 `false`。
2. 判断 $s$ 和 $t$ 的字符集合是否一样，如果不一样直接返回 `false`。例如 $s$ 中有字符 $\texttt{abc}$，$t$ 中有字符 $\texttt{def}$，我们无论如何都不能把 $s$ 变成 $t$。
3. 判断 $s$ 的字符出现次数的集合，是否等于 $t$ 的字符出现次数的集合，等于返回 `true`，不等于返回 `false`。注意集合可以有相同元素，比如 $\texttt{aabbbccc}$ 对应的集合就是 $\{2,3,3\}$。

### 实现细节

判断字符集合是否一样，可以用位运算实现，也就是用二进制数（从低到高）第 $i$ 位来存储是否有第 $i$ 个小写英文字母，这样只需要判断两个二进制数是否一样即可。具体请看 [从集合论到位运算，常见位运算技巧分类总结！](https://leetcode.cn/circle/discuss/CaOJ45/)

判断字符出现次数的集合是否一样，可以用两个长为 $26$ 的数组统计 $s$ 和 $t$ 中每个字母的出现次数，分别记作 $\textit{sCnt}$ 和 $\textit{tCnt}$。如果这两个数组排序后是一样的，就说明 $s$ 的字符出现次数的集合，等于 $t$ 的字符出现次数的集合。

> 注：Python 的 `set` 和 `Counter` 写起来更简单，故没有用位运算实现。

* [sol-Python3写法一]

```py
class Solution:
    def closeStrings(self, s: str, t: str) -> bool:
        return len(s) == len(t) and \
               set(s) == set(t) and \
               Counter(Counter(s).values()) == Counter(Counter(t).values())
```

* [sol-Python3写法二]

```py
class Solution:
    def closeStrings(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
        cs, ct = Counter(s), Counter(t)
        return cs.keys() == ct.keys() and Counter(cs.values()) == Counter(ct.values())
```

* [sol-Java]

```java
import static java.nio.charset.StandardCharsets.ISO_8859_1;

public class Solution {
    public boolean closeStrings(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }

        int sMask = 0, tMask = 0;
        int[] sCnt = new int[26], tCnt = new int[26];
        for (byte c : s.getBytes(ISO_8859_1)) { // 比 toCharArray 更快
            sMask |= 1 << (c - 'a'); // 记录 s 中有字符 c
            sCnt[c - 'a']++;
        }
        for (byte c : t.getBytes(ISO_8859_1)) {
            tMask |= 1 << (c - 'a'); // 记录 t 中有字符 c
            tCnt[c - 'a']++;
        }

        Arrays.sort(sCnt);
        Arrays.sort(tCnt);
        return sMask == tMask && Arrays.equals(sCnt, tCnt);
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool closeStrings(string s, string t) {
        if (s.length() != t.length()) {
            return false;
        }

        int s_mask = 0, t_mask = 0;
        vector<int> s_cnt(26), t_cnt(26);
        for (char c : s) {
            s_mask |= 1 << (c - 'a'); // 记录 s 中有哪些字母
            s_cnt[c - 'a']++;
        }
        for (char c : t) {
            t_mask |= 1 << (c - 'a'); // 记录 t 中有哪些字母
            t_cnt[c - 'a']++;
        }

        sort(s_cnt.begin(), s_cnt.end());
        sort(t_cnt.begin(), t_cnt.end());
        return s_mask == t_mask && s_cnt == t_cnt;
    }
};
```

* [sol-Go]

```go
func closeStrings(s, t string) bool {
    if len(s) != len(t) {
        return false
    }

    var sMask, tMask int
    var sCnt, tCnt [26]int
    for _, c := range s {
        sMask |= 1 << (c - 'a') // 记录 s 中有字符 c
        sCnt[c-'a']++
    }
    for _, c := range t {
        tMask |= 1 << (c - 'a') // 记录 t 中有字符 c
        tCnt[c-'a']++
    }

    slices.Sort(sCnt[:])
    slices.Sort(tCnt[:])
    return sMask == tMask && slices.Equal(sCnt[:], tCnt[:])
}
```

* [sol-JavaScript]

```js
var closeStrings = function (s, t) {
    if (s.length !== t.length) {
        return false;
    }

    const ASCII_A = 'a'.charCodeAt(0);
    let sMask = 0, tMask = 0;
    const sCnt = Array(26).fill(0), tCnt = Array(26).fill(0);
    for (const c of s) {
        sMask |= 1 << (c.charCodeAt(0) - ASCII_A); // 记录 s 中有字符 c
        sCnt[c.charCodeAt(0) - ASCII_A]++;
    }
    for (const c of t) {
        tMask |= 1 << (c.charCodeAt(0) - ASCII_A); // 记录 t 中有字符 c
        tCnt[c.charCodeAt(0) - ASCII_A]++;
    }

    sCnt.sort((a, b) => a - b);
    tCnt.sort((a, b) => a - b);
    return sMask === tMask && _.isEqual(sCnt, tCnt);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn close_strings(s: String, t: String) -> bool {
        if s.len() != t.len() {
            return false;
        }

        let mut s_mask = 0;
        let mut s_cnt = [0; 26];
        for c in s.as_bytes() {
            let c = (c - b'a') as usize;
            s_mask |= 1 << c; // 记录 s 中有字符 c
            s_cnt[c] += 1;
        }

        let mut t_mask = 0;
        let mut t_cnt = [0; 26];
        for c in t.as_bytes() {
            let c = (c - b'a') as usize;
            t_mask |= 1 << c; // 记录 t 中有字符 c
            t_cnt[c] += 1;
        }

        s_cnt.sort_unstable();
        t_cnt.sort_unstable();
        s_mask == t_mask && s_cnt == t_cnt
    }
}
```

不用位运算的写法：

* [sol-Java]

```java
import static java.nio.charset.StandardCharsets.ISO_8859_1;

public class Solution {
    public boolean closeStrings(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }

        int[] sCnt = new int[26];
        for (byte c : s.getBytes(ISO_8859_1)) {
            sCnt[c - 'a']++;
        }

        int[] tCnt = new int[26];
        for (byte c : t.getBytes(ISO_8859_1)) {
            tCnt[c - 'a']++;
        }

        for (int i = 0; i < 26; i++) {
            if ((sCnt[i] == 0) != (tCnt[i] == 0)) {
                return false;
            }
        }

        Arrays.sort(sCnt);
        Arrays.sort(tCnt);
        return Arrays.equals(sCnt, tCnt);
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool closeStrings(string s, string t) {
        if (s.length() != t.length()) {
            return false;
        }

        vector<int> s_cnt(26);
        for (char c : s) {
            s_cnt[c - 'a']++;
        }

        vector<int> t_cnt(26);
        for (char c : t) {
            t_cnt[c - 'a']++;
        }

        for (int i = 0; i < 26; i++) {
            if ((s_cnt[i] == 0) != (t_cnt[i] == 0)) {
                return false;
            }
        }

        sort(s_cnt.begin(), s_cnt.end());
        sort(t_cnt.begin(), t_cnt.end());
        return s_cnt == t_cnt;
    }
};
```

* [sol-Go]

```go
func closeStrings(s, t string) bool {
    if len(s) != len(t) {
        return false
    }

    var sCnt, tCnt [26]int
    for _, c := range s {
        sCnt[c-'a']++
    }
    for _, c := range t {
        tCnt[c-'a']++
    }

    for i := 0; i < 26; i++ {
        if (sCnt[i] == 0) != (tCnt[i] == 0) {
            return false
        }
    }

    slices.Sort(sCnt[:])
    slices.Sort(tCnt[:])
    return slices.Equal(sCnt[:], tCnt[:])
}
```

* [sol-JavaScript]

```js
var closeStrings = function (s, t) {
    if (s.length !== t.length) {
        return false;
    }

    const ASCII_A = 'a'.charCodeAt(0);
    const sCnt = Array(26).fill(0);
    for (const c of s) {
        sCnt[c.charCodeAt(0) - ASCII_A]++;
    }

    const tCnt = Array(26).fill(0);
    for (const c of t) {
        tCnt[c.charCodeAt(0) - ASCII_A]++;
    }

    for (let i = 0; i < 26; i++) {
        if ((sCnt[i] === 0) !== (tCnt[i] === 0)) {
            return false;
        }
    }

    sCnt.sort((a, b) => a - b);
    tCnt.sort((a, b) => a - b);
    return _.isEqual(sCnt, tCnt);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn close_strings(s: String, t: String) -> bool {
        if s.len() != t.len() {
            return false;
        }

        let mut s_cnt = [0; 26];
        for c in s.as_bytes() {
            s_cnt[(c - b'a') as usize] += 1;
        }

        let mut t_cnt = [0; 26];
        for c in t.as_bytes() {
            t_cnt[(c - b'a') as usize] += 1;
        }

        for i in 0..26 {
            if (s_cnt[i] == 0) != (t_cnt[i] == 0) {
                return false;
            }
        }

        s_cnt.sort_unstable();
        t_cnt.sort_unstable();
        s_cnt == t_cnt
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n+m)$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度。注：如果考虑上排序的时间，就是 $\mathcal{O}(n+m+|\Sigma|\log |\Sigma|)$。
- 空间复杂度：$\mathcal{O}(|\Sigma|)$，其中 $|\Sigma|$ 为字符集合的大小，本题中字符均为小写英文字母，所以 $|\Sigma|=26$。

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

更多精彩题解，请看 [往期题解精选（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
