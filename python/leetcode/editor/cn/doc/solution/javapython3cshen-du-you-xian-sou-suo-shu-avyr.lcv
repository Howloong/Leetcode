# 题目

## 2477. 到达首都的最少油耗

给你一棵 `n` 个节点的树（一个无向、连通、无环图），每个节点表示一个城市，编号从 `0` 到 `n - 1` ，且恰好有 `n - 1` 条路。`0` 是首都。给你一个二维整数数组 `roads` ，其中 `roads[i] = [ai, bi]` ，表示城市 `ai` 和 `bi` 之间有一条 **双向路** 。

每个城市里有一个代表，他们都要去首都参加一个会议。

每座城市里有一辆车。给你一个整数 `seats` 表示每辆车里面座位的数目。

城市里的代表可以选择乘坐所在城市的车，或者乘坐其他城市的车。相邻城市之间一辆车的油耗是一升汽油。

请你返回到达首都最少需要多少升汽油。

# 题目分析

这道题其实是要找到 **树结构中所有节点到根节点的最小开销和** 。

题目中的每个城市其实就是树结构中的一个节点，除了根节点外，每个节点都要从自身出发到达根节点，这其实就是根节点到每个节点的路径。【深度优先搜索先准备着】

每个节点之间一辆车的转移的开销为 `1`，我们要让开销和最小，那么就要**使每个节点之间的转移车尽量的少**。
那么怎么安排每个节点之间转移的车辆数呢，我们可以统计途径每个节点的代表人数有多少个，这些代表从当前节点往根节点方向转移到下一个节点【树结构，只有一种转移方式】需要车辆数，一定是 **代表人数除以车的容量然后向上取整**。

![image.png](https://pic.leetcode.cn/1701710180-TKfcNr-image.png)

经过每个节点的代表人数就 **是以这个节点为根的子树的节点数** , 我们可以通过深度优先搜索递归处理时, 返回当前节点为根的子树的节点数。

## 算法过程图解

以示例`2`进行图解

![image.png](https://pic.leetcode.cn/1701710938-HyFxsL-image.png)

【可以理解成节点与节点之间的转移是独立的, 每个城市会等经过该城市的代表都到了,重新发车把他们送到下一个城市】

# 代码

**注意:**

> 通过向下取整得到向上取整的策略

假设要对m除以n进行向上取整, 结果就为 (m + n - 1) / n, / 表示向下取整
推导参见 [如何直接得到一个数除以 3 后向上取整的结果？](https://leetcode.cn/problems/maximal-score-after-applying-k-operations/solutions/2487341/javapython3ctan-xin-da-ding-dui-shi-ke-w-ziks/)

> 根节点不转移

深度优先搜索的递归中, 对城市 `0`, 其没有要转移的下一个节点, 因此不能计算转移消耗的汽油数。

* []

```Java
class Solution {
    private long fuel = 0;

    public long minimumFuelCost(int[][] roads, int seats) {
        int n = roads.length + 1;       // 节点个数
        // 生成树结构
        List<List<Integer>> tree = new ArrayList<>();
        for(int i = 0; i < n; i++){
            tree.add(new ArrayList<>());
        }
        for(int[] r: roads){
            tree.get(r[0]).add(r[1]);
            tree.get(r[1]).add(r[0]);
        }
        boolean[] visited = new boolean[n];    // 标记数组
        visited[0] = true;          // 初始标记0节点已遍历
        dfs(0, tree, visited, seats);   // 从0节点开始深度优先搜索寻找每一条路径
        return fuel;
    }

    /**
     * 对当前城市节点city进行深度优先搜索，返回去往首都路上经过该城市的代表人数
     * @param city: 当前城市节点编号
     * @param tree: 树结构，tree[i] 表示城市节点i的所有邻节点
     * @param visited: 表示城市节点是否访问过
     * @param seats: 每辆车的容量
     * @return：返回去往首都路上经过该城市的代表人数people
    */
    private int dfs(int city, List<List<Integer>> tree, boolean[] visited, int seats){
        int people = 1;     // 该城市本身有一个代表
        // 枚举当前城市节点的所有邻节点
        for(int neighbor: tree.get(city)){
            // 处理未遍历过的邻节点
            if(!visited[neighbor]){
                visited[neighbor] = true;                 
                people += dfs(neighbor, tree, visited, seats);  // 累加到达当前城市的代表人数
            }
        }
        if(city != 0){
            // city不为0，就需要在移动到下一个节点，people个代表需要的车辆数等于people ÷ seats 向上取整
            // 即有这么多辆车从当前节点到达下一个节点，每辆车消耗1汽油
            fuel += (people + seats - 1) / seats;   
        }        
        return people;
    }
}
```

* []

```Python
class Solution:
    def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:
        """
        * 对当前城市节点city进行深度优先搜索，返回去往首都路上经过该城市的代表人数
         @param city: 当前城市节点编号
         @param tree: 树结构，tree[i] 表示城市节点i的所有邻节点
         @param visited: 表示城市节点是否访问过
         @seats: 每辆车的容量
         @return：返回去往首都路上经过该城市的代表人数people
        """
        def dfs(city: int) -> int:
            people = 1     # 该城市本身有一个代表
            # 枚举当前城市节点的所有邻节点
            for neighbor in tree[city]:
                # 处理未遍历过的邻节点
                if not visited[neighbor]:
                    visited[neighbor] = True                 
                    people += dfs(neighbor)  # 累加到达当前城市的代表人数
            if city:
                # city不为0，就需要在移动到下一个节点，people个代表需要的车辆数等于people ÷ seats 向上取整
                # 即有这么多辆车从当前节点到达下一个节点，每辆车消耗1汽油
                self.fuel += (people + seats - 1) // seats           
            return people

        self.fuel = 0
        n = len(roads) + 1       # 节点个数
        # 生成树结构
        tree = [[] for _ in range(n)]
        for (a, b) in roads:
            tree[a].append(b)
            tree[b].append(a)
        visited = [False] * n    # 标记数组
        visited[0] = True          # 初始标记0节点已遍历
        dfs(0)   # 从0节点开始深度优先搜索寻找每一条路径
        return self.fuel

```

* []

```C++
class Solution {
private:
    long long fuel = 0;

    /**
     * 对当前城市节点city进行深度优先搜索，返回去往首都路上经过该城市的代表人数
     * @param city: 当前城市节点编号
     * @param tree: 树结构，tree[i] 表示城市节点i的所有邻节点
     * @param visited: 表示城市节点是否访问过
     * @seats: 每辆车的容量
     * @return：返回去往首都路上经过该城市的代表人数people
    */
    int dfs(int city, vector<vector<int>>&tree, vector<bool>&visited, int seats){
        int people = 1;     // 该城市本身有一个代表
        // 枚举当前城市节点的所有邻节点
        for(auto neighbor: tree[city]){
            // 处理未遍历过的邻节点
            if(!visited[neighbor]){
                visited[neighbor] = true;                 
                people += dfs(neighbor, tree, visited, seats);  // 累加到达当前城市的代表人数
            }
        }
        if(city != 0){
            // city不为0，就需要在移动到下一个节点，people个代表需要的车辆数等于people ÷ seats 向上取整
            // 即有这么多辆车从当前节点到达下一个节点，每辆车消耗1汽油
            fuel += (people + seats - 1) / seats;   
        }        
        return people;
    }

public:
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        int n = roads.size() + 1;       // 节点个数
        // 生成树结构
        vector<vector<int>> tree(n);
        for(auto & r: roads){
            tree[r[0]].emplace_back(r[1]);
            tree[r[1]].emplace_back(r[0]);
        }
        vector<bool> visited(n);    // 标记数组
        visited[0] = true;          // 初始标记0节点已遍历
        dfs(0, tree, visited, seats);   // 从0节点开始深度优先搜索寻找每一条路径
        return fuel;
    }
};
```

