## 前置知识：动态规划入门

请看 [动态规划入门：从记忆化搜索到递推【基础算法精讲 17】](https://b23.tv/pc522x3)

## 一、启发思考：寻找子问题

![lc2304.png](https://pic.leetcode.cn/1700527245-yKjdhc-lc2304.png)

看示例 1。假设我们从第一行的 $\textit{grid}[0][0]$ 出发，要计算的问题是：从 $\textit{grid}[0][0]$ 出发，到达最后一行任意单元格的最小路径代价。

枚举下一步的位置。例如下一步移动到 $\textit{grid}[1][1]$，那么要计算的问题是：从 $\textit{grid}[1][1]$ 出发，到达最后一行任意单元格的最小路径代价。这是一个**和原问题相似的、规模更小的子问题**，所以我们可以用**递归**解决。

> 注：动态规划有「选或不选」和「枚举选哪个」两种基本思考方式。在做题时，可根据题目要求，选择适合题目的一种来思考。本题用到的是「枚举选哪个」。

## 二、递归怎么写：状态定义与状态转移方程

如何用参数表示一个子问题？我们需要知道从哪个格子出发，所以用格子的坐标 $(i,j)$ 就能表示一个子问题。

因此，定义 $\textit{dfs}(i,j)$ 表示从 $\textit{grid}[i][j]$ 出发，到达最后一行任意单元格的最小路径代价。

枚举下一步的位置。假设移动到下一行的 $\textit{grid}[i+1][k]$，那么移动代价就是

$$
\textit{moveCost}[\textit{grid}[i][j]][k]
$$

枚举所有的 $k$，取最小值，再加上当前单元格的值 $\textit{grid}[i][j]$，得到

$$
\textit{dfs}(i,j) = \textit{grid}[i][j] + \min_{k=0}^{n-1} \textit{dfs}(i+1,k) + \textit{moveCost}[\textit{grid}[i][j]][k]
$$

递归边界：$\textit{dfs}(m-1,j)=\textit{grid}[m-1][j]$。最后一行无需移动，代价只有单元格的值。

递归入口：$\textit{dfs}(0,j)$。枚举所有的 $j$，取最小值，答案就是

$$
\min_{j=0}^{n-1} \textit{dfs}(0,j)
$$

* [sol-Python3]

```py
# 会超时的递归代码
class Solution:
    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])

        def dfs(i: int, j: int) -> int:
            if i == m - 1:  # 递归边界
                return grid[i][j]
            res = inf
            for k, c in enumerate(moveCost[grid[i][j]]):  # 移动到下一行的第 k 列
                res = min(res, dfs(i + 1, k) + c)
            return res + grid[i][j]

        return min(dfs(0, j) for j in range(n))  # 枚举起点
```

* [sol-Java]

```java
// 会超时的递归代码
class Solution {
    public int minPathCost(int[][] grid, int[][] moveCost) {
        int ans = Integer.MAX_VALUE;
        for (int j = 0; j < grid[0].length; j++) { // 枚举起点
            ans = Math.min(ans, dfs(0, j, grid, moveCost));
        }
        return ans;
    }

    private int dfs(int i, int j, int[][] grid, int[][] moveCost) {
        if (i == grid.length - 1) { // 递归边界
            return grid[i][j];
        }
        int res = Integer.MAX_VALUE;
        for (int k = 0; k < grid[0].length; k++) { // 移动到下一行的第 k 列
            res = Math.min(res, dfs(i + 1, k, grid, moveCost) + moveCost[grid[i][j]][k]);
        }
        return res + grid[i][j];
    }
}
```

* [sol-C++]

```cpp
// 会超时的递归代码
class Solution {
public:
    int minPathCost(vector<vector<int>> &grid, vector<vector<int>> &moveCost) {
        int m = grid.size(), n = grid[0].size();
        function<int(int, int)> dfs = [&](int i, int j) -> int {
            if (i == m - 1) { // 递归边界
                return grid[i][j];
            }
            int res = INT_MAX;
            for (int k = 0; k < n; k++) { // 移动到下一行的第 k 列
                res = min(res, dfs(i + 1, k) + moveCost[grid[i][j]][k]);
            }
            return res + grid[i][j];
        };
        int ans = INT_MAX;
        for (int j = 0; j < n; j++) { // 枚举起点
            ans = min(ans, dfs(0, j));
        }
        return ans;
    }
};
```

* [sol-Go]

```go
// 会超时的递归代码
func minPathCost(grid [][]int, moveCost [][]int) int {
    m, n := len(grid), len(grid[0])
    var dfs func(int, int) int
    dfs = func(i, j int) int {
        if i == m-1 { // 递归边界
            return grid[i][j]
        }
        res := math.MaxInt
        for k, c := range moveCost[grid[i][j]] { // 移动到下一行的第 k 列
            res = min(res, dfs(i+1, k)+c)
        }
        return res + grid[i][j]
    }
    ans := math.MaxInt
    for j := 0; j < n; j++ { // 枚举起点
        ans = min(ans, dfs(0, j))
    }
    return ans
}
```

* [sol-JavaScript]

```js
// 会超时的递归代码
var minPathCost = function (grid, moveCost) {
    const m = grid.length, n = grid[0].length;

    function dfs(i, j) {
        if (i === m - 1) { // 递归边界
            return grid[i][j];
        }
        let res = Infinity;
        for (let k = 0; k < n; k++) { // 移动到下一行的第 k 列
            res = Math.min(res, dfs(i + 1, k) + moveCost[grid[i][j]][k]);
        }
        return res + grid[i][j];
    }

    let ans = Infinity;
    for (let j = 0; j < n; j++) { // 枚举起点
        ans = Math.min(ans, dfs(0, j));
    }
    return ans;
};
```

* [sol-Rust]

```rust
// 会超时的递归代码
impl Solution {
    pub fn min_path_cost(grid: Vec<Vec<i32>>, move_cost: Vec<Vec<i32>>) -> i32 {
        fn dfs(i: usize, j: usize, grid: &Vec<Vec<i32>>, move_cost: &Vec<Vec<i32>>) -> i32 {
            if i == grid.len() - 1 { // 递归边界
                return grid[i][j];
            }
            let mut res = i32::MAX;
            for (k, &c) in move_cost[grid[i][j] as usize].iter().enumerate() {
                // 移动到下一行的第 k 列
                res = res.min(dfs(i + 1, k, grid, move_cost) + c);
            }
            res + grid[i][j]
        }
        let mut ans = i32::MAX;
        for j in 0..grid[0].len() { // 枚举起点
            ans = ans.min(dfs(0, j, &grid, &move_cost));
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n^m)$，其中 $n$ 和 $m$ 分别为 $\textit{grid}$ 的行数和列数。搜索树是一棵 $n$ 叉树，树高为 $\mathcal{O}(m)$，所以节点个数为 $\mathcal{O}(n^m)$，遍历搜索树需要 $\mathcal{O}(n^m)$ 的时间。
- 空间复杂度：$\mathcal{O}(m)$。递归需要 $\mathcal{O}(m)$ 的栈空间。

## 三、递归 + 记录返回值 = 记忆化搜索

上面的做法太慢了，怎么优化呢？

对于 $\textit{grid}[i][j]$ 来说，上一行的每个格子都可以移动到它，所以我们会多次递归到 $\textit{dfs}(i,j)$。

一叶知秋，整个递归中有大量重复递归调用（递归入参相同）。由于递归函数没有副作用，同样的入参无论计算多少次，算出来的结果都是一样的，因此可以用**记忆化搜索**来优化：

- 如果一个状态（递归入参）是第一次遇到，那么可以在返回前，把状态及其结果记到一个 $\textit{memo}$ 数组中。
- 如果一个状态不是第一次遇到（$\textit{memo}$ 中保存的结果不等于 $\textit{memo}$ 的初始值），那么可以直接返回 $\textit{memo}$ 中保存的结果。

**注意**：$\textit{memo}$ 数组的初始值一定不能等于要记忆化的值！例如初始值设置为 $0$，并且要记忆化的 $\textit{dfs}(i,j)$ 也等于 $0$，那就没法判断 $0$ 到底表示第一次遇到这个状态，还是表示之前遇到过了，从而导致记忆化失效。一般把初始值设置为 $-1$。本题由于 $\textit{moveCost}$ 中的数都是正数，所以可以把初始值设置为 $0$。

> Python 用户可以无视上面这段，直接用 `@cache` 装饰器。

* [sol-Python3]

```py
class Solution:
    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])

        @cache  # 缓存装饰器，避免重复计算 dfs 的结果
        def dfs(i: int, j: int) -> int:
            if i == m - 1:  # 递归边界
                return grid[i][j]
            res = inf
            for k, c in enumerate(moveCost[grid[i][j]]):  # 移动到下一行的第 k 列
                res = min(res, dfs(i + 1, k) + c)
            return res + grid[i][j]

        return min(dfs(0, j) for j in range(n))  # 枚举起点
```

* [sol-Java]

```java
class Solution {
    public int minPathCost(int[][] grid, int[][] moveCost) {
        int m = grid.length, n = grid[0].length;
        int[][] memo = new int[m][n];
        int ans = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) { // 枚举起点
            ans = Math.min(ans, dfs(0, j, memo, grid, moveCost));
        }
        return ans;
    }

    private int dfs(int i, int j, int[][] memo, int[][] grid, int[][] moveCost) {
        if (i == grid.length - 1) { // 递归边界
            return grid[i][j];
        }
        if (memo[i][j] != 0) { // 之前计算过
            return memo[i][j];
        }
        int res = Integer.MAX_VALUE;
        for (int k = 0; k < grid[0].length; k++) { // 移动到下一行的第 k 列
            res = Math.min(res, dfs(i + 1, k, memo, grid, moveCost) + moveCost[grid[i][j]][k]);
        }
        return memo[i][j] = res + grid[i][j]; // 记忆化
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int minPathCost(vector<vector<int>> &grid, vector<vector<int>> &moveCost) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> memo(m, vector<int>(n));
        function<int(int, int)> dfs = [&](int i, int j) -> int {
            if (i == m - 1) { // 递归边界
                return grid[i][j];
            }
            auto &res = memo[i][j]; // 注意这里是引用
            if (res) { // 之前计算过
                return res;
            }
            res = INT_MAX;
            for (int k = 0; k < n; k++) { // 移动到下一行的第 k 列
                res = min(res, dfs(i + 1, k) + moveCost[grid[i][j]][k]);
            }
            res += grid[i][j];
            return res;
        };
        int ans = INT_MAX;
        for (int j = 0; j < n; j++) { // 枚举起点
            ans = min(ans, dfs(0, j));
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func minPathCost(grid [][]int, moveCost [][]int) int {
    m, n := len(grid), len(grid[0])
    memo := make([][]int, m)
    for i := range memo {
        memo[i] = make([]int, n)
    }
    var dfs func(int, int) int
    dfs = func(i, j int) int {
        if i == m-1 { // 递归边界
            return grid[i][j]
        }
        p := &memo[i][j]
        if *p != 0 { // 之前计算过
            return *p
        }
        res := math.MaxInt
        for k, c := range moveCost[grid[i][j]] { // 移动到下一行的第 k 列
            res = min(res, dfs(i+1, k)+c)
        }
        *p = res + grid[i][j] // 记忆化
        return *p
    }
    ans := math.MaxInt
    for j := 0; j < n; j++ { // 枚举起点
        ans = min(ans, dfs(0, j))
    }
    return ans
}
```

* [sol-JavaScript]

```js
var minPathCost = function (grid, moveCost) {
    const m = grid.length, n = grid[0].length;
    const memo = Array(m).fill(null).map(() => Array(n).fill(0));

    function dfs(i, j) {
        if (i === m - 1) { // 递归边界
            return grid[i][j];
        }
        if (memo[i][j] !== 0) { // 之前计算过
            return memo[i][j];
        }
        let res = Infinity;
        for (let k = 0; k < n; k++) { // 移动到下一行的第 k 列
            res = Math.min(res, dfs(i + 1, k) + moveCost[grid[i][j]][k]);
        }
        return memo[i][j] = res + grid[i][j]; // 记忆化
    }

    let ans = Infinity;
    for (let j = 0; j < n; j++) { // 枚举起点
        ans = Math.min(ans, dfs(0, j));
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn min_path_cost(grid: Vec<Vec<i32>>, move_cost: Vec<Vec<i32>>) -> i32 {
        let m = grid.len();
        let n = grid[0].len();
        let mut memo = vec![vec![0; n]; m];
        fn dfs(i: usize, j: usize, memo: &mut Vec<Vec<i32>>, grid: &Vec<Vec<i32>>, move_cost: &Vec<Vec<i32>>) -> i32 {
            if i == grid.len() - 1 { // 递归边界
                return grid[i][j];
            }
            if memo[i][j] != 0 { // 之前计算过
                return memo[i][j];
            }
            let mut res = i32::MAX;
            for (k, &c) in move_cost[grid[i][j] as usize].iter().enumerate() {
                // 移动到下一行的第 k 列
                res = res.min(dfs(i + 1, k, memo, grid, move_cost) + c);
            }
            res += grid[i][j];
            memo[i][j] = res; // 记忆化
            res
        }
        let mut ans = i32::MAX;
        for j in 0..n { // 枚举起点
            ans = ans.min(dfs(0, j, &mut memo, &grid, &move_cost));
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(mn^2)$，其中 $m$ 和 $n$ 分别为 $\textit{grid}$ 的行数和列数。由于每个状态只会计算一次，动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题状态个数等于 $\mathcal{O}(mn)$，单个状态的计算时间为 $\mathcal{O}(n)$，所以动态规划的时间复杂度为 $\mathcal{O}(mn^2)$。
- 空间复杂度：$\mathcal{O}(mn)$。有多少个状态，$\textit{memo}$ 数组的大小就是多少。

## 四、1:1 翻译成递推

我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

做法：

- $\textit{dfs}$ 改成 $f$ 数组；
- 递归改成循环（每个参数都对应一层循环）；
- 递归边界改成 $f$ 数组的初始值。
- 递归入口即为答案。

> 相当于之前是用递归去计算每个状态，现在是**枚举**并计算每个状态。

具体来说，$f[i][j]$ 的定义和 $\textit{dfs}(i,j)$ 的定义是完全一样的，都表示从 $\textit{grid}[i][j]$ 出发，到达最后一行任意单元格的最小路径代价。

相应的递推式（状态转移方程）也和 $\textit{dfs}$ 一样：

$$
f[i][j] =\textit{grid}[i][j] + \min_{k=0}^{n-1} f[i+1][k] + \textit{moveCost}[\textit{grid}[i][j]][k]
$$

初始值 $f[m-1][j]=\textit{grid}[m-1][j]$，翻译自递归边界 $\textit{dfs}(m-1,j)=\textit{grid}[m-1][j]$。

答案为 $\min\limits_{j=0}^{n-1}f[0][j]$，翻译自递归入口 $\min\limits_{j=0}^{n-1}\textit{dfs}(0,j)$。

#### 答疑

**问**：如何思考循环顺序？什么时候要正序枚举，什么时候要倒序枚举？

**答**：这里有一个通用的做法：盯着状态转移方程，想一想，要计算 $f[i][j]$，必须先把 $f[i+1][\cdot]$ 算出来，那么只有 $i$ 从大到小枚举才能做到。对于 $j$ 来说，由于在计算 $f[i][j]$ 的时候，$f[i+1][\cdot]$ 已经全部计算完毕，所以 $j$ 无论是正序还是倒序枚举都可以。

* [sol-Python3]

```py
class Solution:
    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        f = [[inf] * n for _ in range(m)]
        f[-1] = grid[-1]
        for i in range(m - 2, -1, -1):
            for j, g in enumerate(grid[i]):
                for k, c in enumerate(moveCost[g]):  # 移动到下一行的第 k 列
                    f[i][j] = min(f[i][j], f[i + 1][k] + c)
                f[i][j] += g
        return min(f[0])
```

* [sol-Java]

```java
class Solution {
    public int minPathCost(int[][] grid, int[][] moveCost) {
        int m = grid.length, n = grid[0].length;
        int[][] f = new int[m][n];
        f[m - 1] = grid[m - 1];
        for (int i = m - 2; i >= 0; i--) {
            for (int j = 0; j < n; j++) {
                f[i][j] = Integer.MAX_VALUE;
                for (int k = 0; k < n; k++) { // 移动到下一行的第 k 列
                    f[i][j] = Math.min(f[i][j], f[i + 1][k] + moveCost[grid[i][j]][k]);
                }
                f[i][j] += grid[i][j];
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int res : f[0]) {
            ans = Math.min(ans, res);
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int minPathCost(vector<vector<int>> &grid, vector<vector<int>> &moveCost) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> f(m, vector<int>(n, INT_MAX));
        f[m - 1] = grid[m - 1];
        for (int i = m - 2; i >= 0; i--) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) { // 移动到下一行的第 k 列
                    f[i][j] = min(f[i][j], f[i + 1][k] + moveCost[grid[i][j]][k]);
                }
                f[i][j] += grid[i][j];
            }
        }
        return *min_element(f[0].begin(), f[0].end());
    }
};
```

* [sol-Go]

```go
func minPathCost(grid [][]int, moveCost [][]int) int {
    m, n := len(grid), len(grid[0])
    f := make([][]int, m)
    for i := range f {
        f[i] = make([]int, n)
    }
    f[m-1] = grid[m-1]
    for i := m - 2; i >= 0; i-- {
        for j, g := range grid[i] {
            f[i][j] = math.MaxInt
            for k, c := range moveCost[g] { // 移动到下一行的第 k 列
                f[i][j] = min(f[i][j], f[i+1][k]+c)
            }
            f[i][j] += g
        }
    }
    return slices.Min(f[0])
}
```

* [sol-JavaScript]

```js
var minPathCost = function (grid, moveCost) {
    const m = grid.length, n = grid[0].length;
    const f = Array(m).fill(null).map(() => Array(n).fill(Infinity));
    f[m - 1] = grid[m - 1];
    for (let i = m - 2; i >= 0; i--) {
        for (let j = 0; j < n; j++) {
            for (let k = 0; k < n; k++) { // 移动到下一行的第 k 列
                f[i][j] = Math.min(f[i][j], f[i + 1][k] + moveCost[grid[i][j]][k]);
            }
            f[i][j] += grid[i][j];
        }
    }
    return Math.min(...f[0]);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn min_path_cost(mut grid: Vec<Vec<i32>>, move_cost: Vec<Vec<i32>>) -> i32 {
        let m = grid.len();
        let n = grid[0].len();
        let mut f = vec![vec![i32::MAX; n]; m];
        f[m - 1] = grid[m - 1].clone();
        for i in (0..m - 1).rev() {
            for (j, &g) in grid[i].iter().enumerate() {
                f[i][j] = g + f[i + 1]
                    .iter()
                    .zip(move_cost[g as usize].iter())
                    .map(|(&v, &c)| v + c)
                    .min()
                    .unwrap();
            }
        }
        *f[0].iter().min().unwrap()
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(mn^2)$，其中 $m$ 和 $n$ 分别为 $\textit{grid}$ 的行数和列数。
- 空间复杂度：$\mathcal{O}(mn)$。

## 五、原地计算

也可以直接把 $f[i][j]$ 保存在 $\textit{grid}[i][j]$ 中。

递推式变成：

$$
\textit{grid}[i][j] = \textit{grid}[i][j] + \min_{k=0}^{n-1} \textit{grid}[i+1][k] + \textit{moveCost}[\textit{grid}[i][j]][k]
$$

* [sol-Python3]

```py
class Solution:
    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        for i in range(m - 2, -1, -1):
            for j in range(n):
                grid[i][j] += min(g + c for g, c in zip(grid[i + 1], moveCost[grid[i][j]]))
        return min(grid[0])
```

* [sol-Java]

```java
class Solution {
    public int minPathCost(int[][] grid, int[][] moveCost) {
        int m = grid.length, n = grid[0].length;
        for (int i = m - 2; i >= 0; i--) {
            for (int j = 0; j < n; j++) {
                int[] cost = moveCost[grid[i][j]];
                int res = Integer.MAX_VALUE;
                for (int k = 0; k < n; k++) {
                    res = Math.min(res, grid[i + 1][k] + cost[k]);
                }
                grid[i][j] += res;
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int res : grid[0]) {
            ans = Math.min(ans, res);
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int minPathCost(vector<vector<int>> &grid, vector<vector<int>> &moveCost) {
        int m = grid.size(), n = grid[0].size();
        for (int i = m - 2; i >= 0; i--) {
            for (int j = 0; j < n; j++) {
                int res = INT_MAX;
                for (int k = 0; k < n; k++) {
                    res = min(res, grid[i + 1][k] + moveCost[grid[i][j]][k]);
                }
                grid[i][j] += res;
            }
        }
        return *min_element(grid[0].begin(), grid[0].end());
    }
};
```

* [sol-Go]

```go
func minPathCost(grid [][]int, moveCost [][]int) int {
    for i := len(grid) - 2; i >= 0; i-- {
        for j, g := range grid[i] {
            res := math.MaxInt
            for k, c := range moveCost[g] {
                res = min(res, grid[i+1][k]+c)
            }
            grid[i][j] += res
        }
    }
    return slices.Min(grid[0])
}
```

* [sol-JavaScript]

```js
var minPathCost = function (grid, moveCost) {
    const m = grid.length, n = grid[0].length;
    for (let i = m - 2; i >= 0; i--) {
        for (let j = 0; j < n; j++) {
            let res = Infinity;
            for (let k = 0; k < n; k++) {
                res = Math.min(res, grid[i + 1][k] + moveCost[grid[i][j]][k]);
            }
            grid[i][j] += res;
        }
    }
    return Math.min(...grid[0]);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn min_path_cost(mut grid: Vec<Vec<i32>>, move_cost: Vec<Vec<i32>>) -> i32 {
        let m = grid.len();
        let n = grid[0].len();
        for i in (0..m - 1).rev() {
            for j in 0..n {
                grid[i][j] += grid[i + 1]
                    .iter()
                    .zip(move_cost[grid[i][j] as usize].iter())
                    .map(|(&g, &c)| g + c)
                    .min()
                    .unwrap();
            }
        }
        *grid[0].iter().min().unwrap()
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(mn^2)$，其中 $m$ 和 $n$ 分别为 $\textit{grid}$ 的行数和列数。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。

欢迎关注 [B站@灵茶山艾府](https://b23.tv/JMcHRRp)

更多 DP 题解，请看 [往期题解精选（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
