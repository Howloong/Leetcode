# 题目

## 1466. 重新规划路线

`n` 座城市，从 `0` 到 `n-1` 编号，其间共有 `n-1` 条路线。因此，要想在两座不同城市之间旅行只有唯一一条路线可供选择（路线网形成一颗树）。去年，交通运输部决定重新规划路线，以改变交通拥堵的状况。

路线用 `connections` 表示，其中 `connections[i] = [a, b]` 表示从城市 `a` 到 `b` 的一条有向路线。

今年，城市 `0` 将会举办一场大型比赛，很多游客都想前往城市 `0` 。

请你帮助重新规划路线方向，使每个城市都可以访问城市 `0` 。返回需要变更方向的最小路线数。

题目数据 **保证** 每个城市在重新规划路线方向后都能到达城市 `0` 。

# 题目分析

## 先验知识

1. 根据连接关系生成树结构
2. 广度优先搜索/深度优先搜索

## 思路分析

这道题给我们的**图结构是一棵树**，但是这个树上**的节点彼此之间的边是有向的**。
题目要求什么呢？题目希望得到最后得到的树结构是这样：

![image.png](https://pic.leetcode.cn/1701883087-EyEZWV-image.png)

即所有节点的边的箭头都是指向 `n` 的。因此我们**统计原图中反向的边数就是需要变更方向的路线数**。【树结构不存在环，因此只要方向反了就一定只能修正这个方向而没有其他路线可以到达 `0`】

![image.png](https://pic.leetcode.cn/1701883219-TzaBhb-image.png)

## 如何统计呢？

我们可以**以 `0` 节点为根节点对树进行遍历**（树的遍历我们不管这个方向，按照树的遍历来做即可）。
那么遍历过程中发现方向是由**当前节点指向邻节点**的，就是一个反向边。

![image.png](https://pic.leetcode.cn/1701883888-nVqMgI-image.png)

## 如何表示边的方向呢？

我们在生成树结构的时候，可以多引入一个信息表示方向。即原本 `tree[i]` 表示的是 `i` 的所有邻节点；现在每个元素多加一个标志位：
- `1`：节点 `i` 指向这个邻节点;
- `0`: 这个邻节点指向节点 `i`;

![image.png](https://pic.leetcode.cn/1701883417-yONMjH-image.png)

# 代码

> 注：Python解法耗时过大，如果有高效做法欢迎讨论！

* []

```Java
class Solution {
    public int minReorder(int n, int[][] connections) {
        // 生成树结构，tree[i]中的每个元素表示{节点i的邻节点，是否由节点i指向邻节点}
        List<List<int[]>> tree = new ArrayList<>();
        for(int i = 0; i < n; i++){
          tree.add(new ArrayList<>());
        }
        for(int[] con: connections){
            tree.get(con[0]).add(new int[]{con[1], 1});    // con[0] 指向 con[1]，标记为1
            tree.get(con[1]).add(new int[]{con[0], 0});    // con[1] 不指向 con[0]，标记为0
        }
        // 广度优先搜索
        boolean[] visited = new boolean[n];    // visited[i] 表示节点i 是否已经处理
        Queue<Integer> queue = new LinkedList<>();          // BFS使用的队列
        queue.offer(0);          // 从0节点开始遍历
        visited[0] = true;
        int res = 0;
        while (!queue.isEmpty())
        {
            int node = queue.poll();      // 获取队首节点
            for(int[] neighbor: tree.get(node)){
                // 枚举节点node的所有邻节点
                if(visited[neighbor[0]])continue;    // 跳过处理过的节点
                visited[neighbor[0]] = true;         // 标记邻节点已处理
                queue.offer(neighbor[0]);         // 邻节点入队
                if(neighbor[1] == 1)res += 1;            // 如果由当前节点指向邻节点，需要反向
            }
        }
        return res;
    }
}
```

* []

```Python
class Solution:
    def minReorder(self, n: int, connections: List[List[int]]) -> int:
        # 生成树结构，tree[i]中的每个元素表示{节点i的邻节点，是否由节点i指向邻节点}
        tree = [[] for _ in range(n)]
        for (a, b) in connections:
            tree[a].append((b, 1))    # a 指向 b，标记为1
            tree[b].append((a, 0))    # b 不指向 a，标记为0
        # 广度优先搜索
        visited = set()    # visited[i] 表示节点i 是否已经处理
        queue = [0]          # BFS使用的队列; 从0节点开始遍历
        visited.add(0)
        res = 0
        while queue:
            node = queue.pop(0)      # 获取队首节点
            for (neighbor, flag) in tree[node]:
                # 枚举节点node的所有邻节点
                if neighbor in visited: continue    # 跳过处理过的节点
                visited.add(neighbor)               # 标记邻节点已处理
                queue.append(neighbor)              # 邻节点入队
                if flag: res += 1                   # 如果由当前节点指向邻节点，需要反向
        return res
```

* []

```C++
class Solution {
public:
    int minReorder(int n, vector<vector<int>>& connections) {
        // 生成树结构，tree[i]中的每个元素表示{节点i的邻节点，是否由节点i指向邻节点}
        vector<vector<pair<int,int>>> tree(n);
        for(auto & con: connections){
            tree[con[0]].emplace_back(con[1], 1);    // con[0] 指向 con[1]，标记为1
            tree[con[1]].emplace_back(con[0], 0);    // con[1] 不指向 con[0]，标记为0
        }
        // 广度优先搜索
        vector<bool> visited(n);    // visited[i] 表示节点i 是否已经处理
        queue<int> queue_;          // BFS使用的队列
        queue_.emplace(0);          // 从0节点开始遍历
        visited[0] = true;
        int res = 0;
        while (!queue_.empty())
        {
            int node = queue_.front();      // 获取队首节点
            queue_.pop();
            for(auto &neighbor: tree[node]){
                // 枚举节点node的所有邻节点
                if(visited[neighbor.first])continue;    // 跳过处理过的节点
                visited[neighbor.first] = true;         // 标记邻节点已处理
                queue_.emplace(neighbor.first);         // 邻节点入队
                if(neighbor.second)res += 1;            // 如果由当前节点指向邻节点，需要反向
            }
        }
        return res;
    }
};
```

