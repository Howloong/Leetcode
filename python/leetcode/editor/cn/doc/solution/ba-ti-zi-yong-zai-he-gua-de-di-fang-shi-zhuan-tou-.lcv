![QQ截图20201102121711.png](https://pic.leetcode-cn.com/1604290651-kvDoNd-QQ%E6%88%AA%E5%9B%BE20201102121711.png)

方法1：二分模板题，寻找满足条件的可能最大值（区间右边界），这个条件就是使用现有的梯子和砖头看能不能走的到
首先是二分的模板代码：

* java

```java
 public int furthestBuilding(int[] heights, int bricks, int ladders) {
        int n=heights.length;//楼的数目
        int left=0;//二分查找的可能最小值，一栋楼也走不了
        int right=n-1;//二分查找的可能最大值，走到最后一栋楼
        int mid=-1,res=-1;
        while (left<=right){/******查找区间右边界，即所有满足条件（能走的到）的最大值******/
        mid=(left+right)/2;
        if(helper(mid,bricks,ladders,heights)){left=mid+1;res=mid;}
        else{right=mid-1;}
        }
        return res;

}
```

最优的行走策略是：
按照楼之间的间隔**降序**排列，前面先使用梯子，梯子没了再使用砖头。因为使用一个梯子只能通过一个间隔，那么就要让这个间隔尽可能地大，这样做能尽可能节省砖头，**让砖头用在间隔更小的地方**，使得用很少的砖头也能通过较多的间隔
如果按照这个策略也走不到目标target处，那么说明当前traget太大，不满足条件（条件就是能不能走达到target),返回false。
下面是工具函数:

* java

```java
private boolean helper(int target,int bricks, int ladders,int[] heights){
        if(target==0) return true;//从建筑物 0 开始旅程,所以一定能到达0
        int [] differ=new int[target];//差分数组
        for(int i=0;i<target;i++){
            differ[i]=heights[i+1]-heights[i];
        }
        Arrays.sort(differ);//默认间隔从小到大
        for(int i=target-1;i>=0;i--) {//从大到小
            if (ladders > 0) {//优先使用梯子，能使砖头物尽其用
                ladders--;
                continue;
            } else if (bricks >= differ[i]) {//梯子不够了，再使用砖头
                bricks -= differ[i];
                continue;
            } else {//既没有砖头也没有梯子
                return false;
            }
        }
            return true;
    }
```

方法二：贪心
上面说了，一定要把梯子用在合适的地方，也就是**消耗砖头最多的地方**。
所以贪心策略是：从头开始走heights，先使用砖头，并把每个间隔所消耗的砖头数放入大根堆里，待走到某个间隔发现砖头不够用时，从大根堆里取出那个曾经消耗砖头最多的一个间隔，使用梯子去替代那些砖头，这样能节省下来的砖头是最多的，如此循环，直到梯子没有了砖头也不够的时候，就是最远能走得到的。
代码:

* java

```java
class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
   PriorityQueue<Integer> priorityQueue=new PriorityQueue<>(cmp);//降序
        int n=heights.length;
        int i=0;
        for(;i<n-1;i++){
            if(heights[i+1]-heights[i]<=0){
                continue;
            }else{
                int differ=heights[i+1]-heights[i];
                if(differ<=bricks){//先尽可能是用砖头
                    bricks-=differ;
                    priorityQueue.offer(differ);
                    continue;
                }else{//砖头不够用了再用梯子去代替尽可能多的砖头
                    if(ladders>0){
                        ladders--;
                      int temp=priorityQueue.size()==0?-1:priorityQueue.peek();
                        if(temp>=differ){//把梯子用在前面出现过的间隔，拿换回来的砖头去垫当前的间隔
                            bricks+=temp;
                            bricks-=differ;//当前的间隔
                            priorityQueue.poll();
                        }else{//当前间隔是史上最大，那么把梯子用在当前这个间隔
                            
                            
                        }
                    }else{
                        break;//走到头了
                    }
                }
            }
        }
        return i;
    }
     static Comparator<Integer> cmp = new Comparator<Integer>() {
        public int compare(Integer e1, Integer e2) {
            return e2 - e1;
        }
    };
}
```

