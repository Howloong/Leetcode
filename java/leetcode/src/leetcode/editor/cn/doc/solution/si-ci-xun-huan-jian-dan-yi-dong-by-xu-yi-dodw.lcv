* 

```
class Solution:
    def __init__(self):
        #初始位置
        self.position=[0,0]
        #方向分别为北、西、南、东
        self.direction=[(0, 1), (-1, 0), (0, -1), (1, 0)]
        #方向状态，左转加一，右转减一
        self.state = 0

    def isRobotBounded(self, instructions: str) -> bool:
        #如果按照指令循环四次和初始状态一致，则必然陷入环中；因为一个左转指令或右转指令循环四次后会自我抵消
        for index in range(0,len(instructions)*4):
            if instructions[index % len(instructions)] == 'G':
                self.move()
            else:
                self.ch_direction(instructions[index % len(instructions)])
        if self.position == [0,0] and self.state == 0:
            return True
        return False
    
    # 根据当前的方向状态向前移动
    def move(self):
        self.position[0] += self.direction[self.state][0]
        self.position[1] += self.direction[self.state][1]
    
    # 根据左转还是右转改变方向状态
    def ch_direction(self, instruction):
        if instruction == 'L':
            self.state = (self.state + 1) % 4
        if instruction == 'R':
            self.state = (self.state - 1) % 4
```

