[57. 插入区间](/problems/insert-interval/)

# 思路解析

循环遍历数组`intervals`，对于`newInterval`和`intervals[i]`我们分三种情况来讨论：

1. `newInterval`在`intervals[i]`的左边，此时把`newInterval`和`intervals`区间`[i,n)`的元素依次压入`res`中，并返回`res`， 其中`n`为`intervals`的大小，`res`为存储结果的数组。

![lc-0057-01.png](https://pic.leetcode.cn/1691678208-oyoEgv-lc-0057-01.png)

2. `newInterval`在`intervals[i]`的右边，此时把`intervals[i]`压入`res`中，`newInterval`继续跟`intervals[i]`后面的元素比较，`++i`。

![lc-0057-02.png](https://pic.leetcode.cn/1691678227-dDymLU-lc-0057-02.png)

3. `newInterval`和`intervals[i]`有重叠，更新`newInterval`。`newInterval[0] = min(newInterval[0], intervals[i][0])`，`newInterval[1] = max(newInterval[1], intervals[i][1])`，更新后的`newInterval`继续和`intervals[i]`后面的元素比较，`++i`。

![lc-0057-03.png](https://pic.leetcode.cn/1691678277-kVxEZd-lc-0057-03.png)

# C++代码

* cpp

```cpp
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {

        vector<vector<int>> res;
        int intervals_len = intervals.size();
        for (int i = 0; i < intervals_len; ++i) {
            //newInterval在intervals[i]的左边
            if (newInterval[1] < intervals[i][0]) {
                //res中保存newInterval
                res.push_back(newInterval);
                for (int j = i; j < intervals_len; ++j) {
                    res.push_back(intervals[j]);
                }
                return res;
            //newInterval在intervals[i]的右边
            } else if (newInterval[0] > intervals[i][1]) {
                //res中保存intervals[i]
                 res.push_back(intervals[i]);
            //newInterval和intervals[i]重叠
            } else {
                //更新newInterval
                newInterval[0] = min(newInterval[0], intervals[i][0]);
                newInterval[1] = max(newInterval[1], intervals[i][1]);
            }

        }
        
        res.push_back(newInterval);
        return res;
    }
};

```

# 复杂度分析

**时间复杂度：** 需要遍历一遍数组`intervals`，所以时间复杂度为*O(n)*，其中`n`为数组的长度。

**空间复杂度：** 需要用到`res`来保存结果，所以空间复杂度为*O(n)*，其中`n`为数组的长度。

我整理了一份高频面试题目列表，这里**既提供了经典题目列表，还提供了对应的高质量题解**，让刷题更有效率。&#x1F496; &#x1F496;  [在线文档](https://docs.qq.com/sheet/DWGJZdmZSQUJvWWp3) &#x1F496; &#x1F496;
-------------------------------------------------------------------------------------------------------------------------------------------------

另外题目列表和题解都开源在[github](https://github.com/ldtech007/leetcode)上了，欢迎大家提建议。
-----------------------------------------------------------------------

---

关注[@溜达虎爱编程](/u/ldtiger)，学习算法不辛苦！

