    class Solution {
        public int longestSubarray(int[] nums, int limit) {
            ArrayDeque<Integer> maxDeque = new ArrayDeque<>();
            ArrayDeque<Integer> minDeque = new ArrayDeque<>();
            int n = nums.length;
            int left = 0;
            int right = 0;
            int res = 0;
            while (right < n) {
                int rightNum = nums[right];
                while (!maxDeque.isEmpty() && maxDeque.peekLast() < rightNum) {
                    maxDeque.pollLast();
                }
                while (!minDeque.isEmpty() && minDeque.peekLast() > rightNum) {
                    minDeque.pollLast();
                }
                maxDeque.offer(rightNum);
                minDeque.offer(rightNum);
                while (!maxDeque.isEmpty() && !minDeque.isEmpty() && maxDeque.peekFirst() - minDeque.peekFirst() > limit) {
                    if (nums[left] == minDeque.peekFirst()) {
                        minDeque.pollFirst();
                    }
                    if (nums[left] == maxDeque.peekFirst()) {
                        maxDeque.pollFirst();
                    }
                    left++;
                }
                res = Math.max(res, right - left + 1);
                right++;
            }
            return res;
        }
    }

//runtime:30 ms
//memory:56.1 MB
