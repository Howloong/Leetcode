
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
            if (root == null) {
                return new ArrayList<>();
            }
            List<List<Integer>> res = new ArrayList<>();
            Deque<TreeNode> deque = new ArrayDeque<>();
            deque.offer(root);
            int direction = 1;
            while (!deque.isEmpty()) {
                int len = deque.size();
                int index = 0;
                List<Integer> list = new ArrayList<>();
                while (index++ < len) {
                    TreeNode node;
                    if (direction == -1) {
                        node = deque.pollLast();
                        if (node.right != null) {
                            deque.offerFirst(node.right);
                        }
                        if (node.left != null) {
                            deque.offerFirst(node.left);
                        }
                    } else {
                        node = deque.pollFirst();
                        if (node.left != null) {
                            deque.offerLast(node.left);
                        }
                        if (node.right != null) {
                            deque.offerLast(node.right);
                        }
                    }

                    list.add(node.val);
                }
                direction = -direction;
                res.add(list);
            }
            return res;
        }
    }

//runtime:1 ms
//memory:40 MB
