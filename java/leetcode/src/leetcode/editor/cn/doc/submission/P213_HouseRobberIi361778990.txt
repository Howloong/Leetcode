    class Solution {
        int n;

        public int rob(int[] nums) {
            n = nums.length;
            if (n == 1) {
                return nums[0];
            }
            if (n == 2) {
                return Math.max(nums[0], nums[1]);
            }
            int range1 = range(nums, 0, n - 2);
            int range2 = range(nums, 1, n - 1);
            return Math.max(range1, range2);
        }

        public int range(int[] nums, int start, int end) {
            int[] dp = new int[n];
            dp[start] = nums[start];
            dp[start+1] = Math.max(nums[start], nums[start+1]);
            for (int i = 2; i <= end; i++) {
                dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);
            }
            return dp[end];
        }
    }

//runtime:0 ms
//memory:39 MB
