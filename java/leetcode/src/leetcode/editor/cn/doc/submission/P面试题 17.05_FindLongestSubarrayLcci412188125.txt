    class Solution {
        public String[] findLongestSubarray(String[] array) {
            int n = array.length;
            Map<Integer, Integer> map = new HashMap<>() {{
                this.put(0, -1);
            }};
            int sum = 0;
            int max = 0;
            int start = -1;
            for (int i = 0; i < n; i++) {
                if (Character.isLetter(array[i].charAt(0))) {
                    sum++;
                } else {
                    sum--;
                }
                if (map.containsKey(sum)) {
                    int first = map.get(sum);
                    if (i - first > max) {
                        max = i - first;
                        start = first + 1;
                    }
                } else {
                    map.put(sum, i);
                }
            }
            return max == 0 ? new String[]{} : Arrays.copyOfRange(array, start, start + max);
        }
    }

//runtime:20 ms
//memory:62 MB
