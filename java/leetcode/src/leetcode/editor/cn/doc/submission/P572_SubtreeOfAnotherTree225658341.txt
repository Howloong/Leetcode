
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        boolean flag = false;

        public boolean isSubtree(TreeNode root, TreeNode subRoot) {
            preOrder(root, subRoot);
            return flag;
        }

        public boolean compare(TreeNode left, TreeNode right) {
            if (left == null && right == null) {
                return true;
            } else if (left != null && right == null) {
                return false;
            } else if (left == null && right != null) {
                return false;
            } else if (left.val != right.val) {
                return false;
            }
            return compare(left.left, right.left) && compare(left.right, right.right);
        }

        public void preOrder(TreeNode node, TreeNode cp) {
            if (node == null) {
                return;
            }
            if (compare(node, cp)) {
                flag = true;
                return;
            }
            if (!flag)
                preOrder(node.left, cp);
            if (!flag)
                preOrder(node.right, cp);
        }

    }

//runtime:3 ms
//memory:38.6 MB
