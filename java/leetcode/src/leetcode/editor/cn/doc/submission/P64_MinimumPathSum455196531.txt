    class Solution {
        public int minPathSum(int[][] grid) {
            int m = grid.length;
            int n = grid[0].length;
            int[] dp = new int[m * n];
            dp[0] = grid[0][0];
            for (int i = 1; i < n; i++) {
                dp[i] = dp[i - 1] + grid[0][i];
            }
            for (int i = 1; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    int index = i * n + j;
                    int up = index - n;
                    dp[index] = dp[up];
                    int left = j - 1;
                    if (left >= 0) {
                        dp[index] = Math.min(dp[index], dp[index-1]);
                    }
                    dp[index] += grid[i][j];
                }
            }
            return dp[dp.length - 1];
        }
    }

//runtime:3 ms
//memory:42.4 MB
