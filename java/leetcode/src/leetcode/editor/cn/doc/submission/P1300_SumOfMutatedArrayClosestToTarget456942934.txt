    class Solution {
        public int findBestValue(int[] arr, int target) {
            int left = 0;
            int right = 0;
            for (int i : arr) {
                right = Math.max(right, i);
            }
            while (left < right) {
                int mid = left + (right - left) / 2;
                if (getSum(arr, mid) < target) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            if (target - getSum(arr, left - 1) <= getSum(arr, left)-target) {
                return left - 1;
            }
            return left;
        }

        public int getSum(int[] nums, int threshold) {
            int sum = 0;
            for (int num : nums) {
                sum += Math.min(num, threshold);
            }
            return sum;
        }
    }

//runtime:3 ms
//memory:42.1 MB
