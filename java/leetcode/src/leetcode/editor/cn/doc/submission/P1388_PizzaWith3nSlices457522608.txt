    class Solution {
        private int n;

        public int maxSizeSlices(int[] slices) {
            int m = slices.length;
            this.n = m / 3;
            return Math.max(getSlice(slices, 0, m - 2), getSlice(slices, 1, m - 1));
        }

        public int getSlice(int[] slices, int start, int end) {
            int[][] dp = new int[end - start + 2][n + 1];
            for (int i = 1; i <= end - start + 1; i++) {
                for (int j = 1; j <= n; j++) {
                    dp[i][j] = Math.max(dp[i - 1][j], (i >= 2 ? dp[i - 2][j - 1] : 0) + slices[i+start-1]);
                }
            }
            return dp[dp.length - 1][n];
        }
    }

//runtime:6 ms
//memory:41.9 MB
