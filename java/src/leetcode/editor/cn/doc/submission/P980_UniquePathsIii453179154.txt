    class Solution {
        public int result = 0;
        public int total;
        public int[][] direct = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        public boolean[][] used;

        public int uniquePathsIII(int[][] grid) {
            used = new boolean[grid.length][grid[0].length];
            int startI = 0;
            int startJ = 0;
            for (int i = 0; i < grid.length; i++) {
                for (int j = 0; j < grid[0].length; j++) {
                    if (grid[i][j] == 0) {
                        total++;
                    } else if (grid[i][j] == 1) {
                        startI = i;
                        startJ = j;
                        used[i][j] = true;
                    } else if (grid[i][j] == -1) {
                        used[i][j] = true;
                    }
                }
            }
            dfs(grid, 0, startI, startJ);
            return result;
        }

        public void dfs(int[][] grid, int sum, int row, int col) {
            if (grid[row][col] == 2) {
                if (sum == total+1) {
                    result++;
                }
                return;
            }
            for (int k = 0; k < direct.length; k++) {
                int newI = row + direct[k][0];
                int newJ = col + direct[k][1];
                if (newI >= 0 && newI < grid.length
                        && newJ >= 0 && newJ < grid[0].length
                        && !used[newI][newJ]) {
                    used[newI][newJ] = true;
                    dfs(grid, sum + 1, newI, newJ);
                    used[newI][newJ] = false;
                }
            }


        }
    }

//runtime:0 ms
//memory:38.6 MB
