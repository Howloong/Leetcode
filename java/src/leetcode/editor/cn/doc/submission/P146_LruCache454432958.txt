    class LRUCache extends LinkedHashMap<Integer, Integer> {
        private int capacity;


        public LRUCache(int capacity) {
            this.capacity = capacity;
        }

        public int get(int key) {
            if (this.containsKey(key)) {
                int value = super.get(key);
                this.remove(key);
                this.put(key, value);
                return value;
            }
            return -1;
        }

        public void put(int key, int value) {
            if (this.containsKey(key)) {
                this.remove(key);
                super.put(key, value);
                return;
            }
            if (this.size() == this.capacity) {
                Iterator<Map.Entry<Integer, Integer>> iterator = this.entrySet().iterator();
                iterator.next();
                iterator.remove();
            }
            super.put(key, value);
        }
    }

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */

//runtime:52 ms
//memory:125.1 MB
