* 

```
class Solution {
    public int[] numMovesStonesII(int[] stones) {
        Arrays.sort(stones); // 将石子的位置按升序排序
        int n = stones.length, i = 0;
        // 计算最大移动次数
        int maxMove = Math.max(stones[n - 1] - stones[1], stones[n - 2] - stones[0]) - n + 2;
        int minMove = n;
        
        // 使用滑动窗口计算最小移动次数
        for (int j = 0; j < n; j++) {
            while (stones[j] - stones[i] >= n) {
                i++;
            }
            if (j - i + 1 == n - 1 && stones[j] - stones[i] == n - 2) {
                minMove = Math.min(minMove, 2);
            } else {
                minMove = Math.min(minMove, n - (j - i + 1));
            }
        }

        return new int[]{minMove, maxMove};
    }
}
```

