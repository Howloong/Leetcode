    class Solution {
        private int n;
        private List<Integer>[] lists;
        private long maxScore;
        private int res;
        public int countHighestScoreNodes(int[] parents) {
            this.n = parents.length;
            lists = new ArrayList[n];
            maxScore = Long.MIN_VALUE;
            Arrays.setAll(lists, (x) -> new ArrayList<>());
            for (int i = 1; i < n; i++) {
                int parent = parents[i];
                lists[parent].add(i);
            }
            dfs(0);
            return res;
        }

        private int dfs(int Node) {
            long score = 1;
            int size = 1;
            for (int i : lists[Node]) {
                int t = dfs(i);
                score *= t;
                size += t;
            }
            if (Node != 0) {
                score *= (n - size);
            }
            if (score == maxScore) {
                res++;
            } else if (score > maxScore) {
                maxScore = score;
                res = 1;
            }
            return size;
        }

    }

//runtime:63 ms
//memory:60.9 MB
