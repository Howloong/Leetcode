    class Solution {
        public int num = 1;

        public int[][] generateMatrix(int n) {
            if (n == 1) {
                return new int[][]{{1}};
            }
            int[][] result = new int[n][n];
            int i = n % 2 == 0 ? n * n : n * n - 1;
            int t = n - 1;
            int row = 0;
            int col = 0;

            while (num <= i) {
                leftToRight(result, col, col + t, row);
                col += t;
                topToBottom(result, row, row + t, col);
                row += t;
                rightToLeft(result, col, col - t, row);
                col -= t;
                bottomToTop(result, row, row - t, col);
                row -= t;
                t -= 2;
                row++;
                col++;
            }
            if (result[n / 2][n / 2] == 0) {
                result[n / 2][n / 2] = n * n;
            }
            return result;
        }

        public void leftToRight(int[][] matrix, int startJ, int endJ, int row) {
            for (int j = startJ; j < endJ; j++) {
                matrix[row][j] = num++;
            }
        }

        public void topToBottom(int[][] matrix, int startI, int endI, int col) {
            for (int i = startI; i < endI; i++) {
                matrix[i][col] = num++;
            }
        }

        public void rightToLeft(int[][] matrix, int startJ, int endJ, int row) {
            for (int j = startJ; j > endJ; j--) {
                matrix[row][j] = num++;
            }
        }

        public void bottomToTop(int[][] matrix, int startI, int endI, int col) {
            for (int i = startI; i > endI; i--) {
                matrix[i][col] = num++;
            }
        }
    }

//runtime:0 ms
//memory:39.5 MB
