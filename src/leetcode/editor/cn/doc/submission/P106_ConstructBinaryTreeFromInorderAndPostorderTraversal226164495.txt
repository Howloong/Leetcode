
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public TreeNode buildTree(int[] inorder, int[] postorder) {
//            后序数组为空，说明没有节点了
            if (postorder.length == 0) {
                return null;
            }
//            否则，取后序数组的最后一个作为中间节点
            int mid = postorder[postorder.length - 1];
            TreeNode node = new TreeNode();
            node.val = mid;
//            后序数组长度为1，说明到了叶子结点，停止
            if (postorder.length == 1) {
                return node;
            }
//            在中序数组中寻找切割点，分成左右子树
            int i;
            for (i = 0; i < inorder.length; i++) {
                if (inorder[i] == mid) {
                    break;
                }
            }
//            分割为两部分，copyOfRange为左闭右开
            int[] leftInorder = Arrays.copyOfRange(inorder, 0, i);
            int[] rightInorder = Arrays.copyOfRange(inorder, i + 1, inorder.length);
//            后序数组的左半边就是中序数组的左半边，两个遍历方式都是先遍历左子树
            int[] leftPostorder = Arrays.copyOfRange(postorder, 0, leftInorder.length);
//            右半边就是除了最后一个根节点剩下的所有
            int[] rightPostorder = Arrays.copyOfRange(postorder, leftPostorder.length,
                    leftPostorder.length + rightInorder.length);
//            递归处理左子树和右子树
            node.left = buildTree(leftInorder, leftPostorder);
            node.right = buildTree(rightInorder, rightPostorder);
            return node;
        }


    }

//runtime:6 ms
//memory:39 MB
