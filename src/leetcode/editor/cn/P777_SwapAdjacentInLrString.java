//Âú®‰∏Ä‰∏™Áî± 'L' , 'R' Âíå 'X' ‰∏â‰∏™Â≠óÁ¨¶ÁªÑÊàêÁöÑÂ≠óÁ¨¶‰∏≤Ôºà‰æãÂ¶Ç"RXXLRXRXL"Ôºâ‰∏≠ËøõË°åÁßªÂä®Êìç‰Ωú„ÄÇ‰∏ÄÊ¨°ÁßªÂä®Êìç‰ΩúÊåáÁî®‰∏Ä‰∏™"LX"ÊõøÊç¢‰∏Ä‰∏™"XL"ÔºåÊàñ
//ËÄÖÁî®‰∏Ä‰∏™"XR"ÊõøÊç¢‰∏Ä‰∏™"RX"„ÄÇÁé∞ÁªôÂÆöËµ∑ÂßãÂ≠óÁ¨¶‰∏≤startÂíåÁªìÊùüÂ≠óÁ¨¶‰∏≤endÔºåËØ∑ÁºñÂÜô‰ª£Á†ÅÔºåÂΩì‰∏î‰ªÖÂΩìÂ≠òÂú®‰∏ÄÁ≥ªÂàóÁßªÂä®Êìç‰Ωú‰ΩøÂæóstartÂèØ‰ª•ËΩ¨Êç¢ÊàêendÊó∂Ôºå ËøîÂõû
//True„ÄÇ 
//
// 
//
// Á§∫‰æã : 
//
// ËæìÂÖ•: start = "RXXLRXRXL", end = "XRLXXRRLX"
//ËæìÂá∫: True
//Ëß£Èáä:
//Êàë‰ª¨ÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÂá†Ê≠•Â∞ÜstartËΩ¨Êç¢Êàêend:
//RXXLRXRXL ->
//XRXLRXRXL ->
//XRLXRXRXL ->
//XRLXXRRXL ->
//XRLXXRRLX
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= len(start) = len(end) <= 10000„ÄÇ 
// startÂíåend‰∏≠ÁöÑÂ≠óÁ¨¶‰∏≤‰ªÖÈôê‰∫é'L', 'R'Âíå'X'„ÄÇ 
// 
//
// Related Topics ÂèåÊåáÈíà Â≠óÁ¨¶‰∏≤ üëç 182 üëé 0

package leetcode.editor.cn;

//Java:Âú®LRÂ≠óÁ¨¶‰∏≤‰∏≠‰∫§Êç¢Áõ∏ÈÇªÂ≠óÁ¨¶
//Time:2022-10-02 12:22:13
class P777_SwapAdjacentInLrString {
    public static void main(String[] args) {
        Solution solution = new P777_SwapAdjacentInLrString().new Solution();
        System.out.println(solution.canTransform("RXXLRXRXL", "XRLXXRRLX"));
        System.out.println(solution.canTransform("X", "L"));
        System.out.println(solution.canTransform("XXXXXLXXXX", "LXXXXXXXXX"));
        System.out.println(solution.canTransform("RLX", "XLR"));
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public boolean canTransform(String start, String end) {
            int i = 0;
            int j = 0;
            char[] startChar = start.toCharArray();
            char[] endChar = end.toCharArray();
            int len = start.length();
            while (i < len || j < len) {
                while (i < len && startChar[i] == 'X') {
                    i++;
                }
                while (j < len && endChar[j] == 'X') {
                    j++;
                }
                if (i == len || j == len) {
                   break;
                }
                if (startChar[i] != endChar[j]) {
                    return false;
                }
                if (startChar[i] == 'L' && i < j || startChar[i] == 'R' && i > j) {
                    return false;
                }
                i++;
                j++;
            }
            if (i == len) {
                while (j < len) {
                    if (endChar[j] != 'X') {
                        return false;
                    }
                    j++;
                }
            }
            if (j == len) {
                while (i < len) {
                    if (startChar[i] != 'X') {
                        return false;
                    }
                    i++;
                }
            }
            return true;
        }


    }
//leetcode submit region end(Prohibit modification and deletion)

}
